plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'jacoco'
}

repositories {
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_12
targetCompatibility = JavaVersion.VERSION_12

dependencies {
    // Spring の Web アプリには大体必要
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Thymeleaf テンプレートで画面を実装するために必要
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Transactional アノテーションを使うのに必要
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // JDBC で Repository を実装するために必要
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    // DB が H2 なので必要
    runtimeOnly 'com.h2database:h2'
    // H2 DB の初期化スクリプトをバージョン管理するのに必要
    runtimeOnly 'org.flywaydb:flyway-core'

    // Value Object を簡単に作るために必要
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // AOP するために必要（ロギングに便利）
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // ソース変更を検知してアプリを再起動してくれる
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'

    // Autowired しながらテストするのに必要
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // これがないと Javadoc 生成が失敗する
    // https://stackoverflow.com/a/28755606/8662861
    compileOnly 'javax.interceptor:javax.interceptor-api:1.+'
}

tasks.test {
    description = "ユニットテストを実行します。対象を絞る場合は --tests '*Service*.add*' のようにフィルタリングできます。"

    testLogging {
        events 'SKIPPED', 'PASSED', 'FAILED'
        exceptionFormat 'full'
        showStandardStreams project.hasProperty('stdout')
    }
}

tasks.javadoc {
    description = 'Javadoc を生成します。テストコードも対象です。'

    // テストコードも Javadoc の対象にして、せっかく書いたコメントを生かす。
    source += sourceSets.test.allJava
    classpath += sourceSets.test.compileClasspath

    failOnError = false
    options.charSet = 'utf-8'
    options.overview = 'src/main/resources/overview.html'
}

tasks.bootRun {
    description = 'ローカル開発モードでアプリを起動します。'

    // application-default.yml の代わりに
    // application-dev.yml から設定を読み込む。
    args = ['--spring.profiles.active=dev']
}

task bootJarRun {
    description = '本番向け資材として WAR をビルドし、その WAR からアプリを起動します。'
    group = tasks.bootRun.group
    dependsOn bootJar

    doLast {
        javaexec {
            main = '-jar'
            args = [tasks.bootJar.archiveFile.get()]
        }
    }
}
